#!/usr/bin/env bash

set -euo pipefail

function help() {
  local ran_subcommand=false
  if [ "$SUBCOMMAND" != "" ]; then ran_subcommand=true; fi
  case "$SUBCOMMAND" in
    showmissing)
      cat <<EOF
Shows missing content file translations

Usage:
  `readlink -f "$0"` translations showmissing
EOF
      ;;
    createmissing)
      cat <<EOF
Creates missing content file translations

Usage:
  `readlink -f "$0"` translations createmissing
EOF
      ;;
    showmissingterms)
      cat <<EOF
Shows missing terms in translation files

Usage:
  `readlink -f "$0"` translations showmissingterms
EOF
      ;;
    azure)
      cat <<EOF
Deploys to Azure Static Web Apps

Usage:
  `readlink -f "$0"` deploy azure
EOF
      ;;
    github)
      cat <<EOF
Deploys to Github Pages

Usage:
  `readlink -f "$0"` deploy github
EOF
      ;;
    dev)
      cat <<EOF
Runs hugo dev server in development mode

Usage:
  `readlink -f "$0"` server (dev) [flags]
EOF
      ;;
    prod)
      cat <<EOF
Runs hugo dev server in production mode

Usage:
  `readlink -f "$0"` server prod [flags]
EOF
      ;;
    run)
      cat <<EOF
Runs the checks, same as running 'check'

Usage:
  `readlink -f "$0"` check [run]
EOF
      ;;
    fix)
      cat <<EOF
Fixes the errors found

Usage:
  `readlink -f "$0"` check fix
EOF
      ;;
    view)
      cat <<EOF
Prints generated file in the editor

Usage:
  `readlink -f "$0"` fontawesome view
EOF
      ;;
    generate)
      cat <<EOF
Generates the file into $PWD/assets/js/fontawesome.generated.mjs

Usage:
  `readlink -f "$0"` fontawesome generate
EOF
      ;;
    *)
      ;;
  esac
  if $ran_subcommand; then exit 0; fi
  case "$COMMAND" in
    complete|completions|completion)
      cat <<EOF
Generates bash completion script

Usage:
  `readlink -f "$0"` complete
EOF
      ;;
    build)
      cat <<EOF
Builds the site

It will run the hugo build, then pagefind and critical.mjs.
Command line options are passed to hugo cli.

Usage:
  `readlink -f "$0"` build
EOF
      ;;
    check)
      cat <<EOF
Checks all files for linting and spelling errors

Usage:
  `readlink -f "$0"` check [command]

Commands:
  fix                       Fixes the errors found
  run                       Runs the checks, same as running 'check'
EOF
      ;;
    makebundle)
      cat <<EOF
Create a new post using hugo

Usage:
  `readlink -f "$0"` makebundle <post_file>
EOF
      ;;
    newpost)
      cat <<EOF
Create a new blog post using hugo

Usage:
  `readlink -f "$0"` newpost <post_name>
EOF
      ;;
    newparticipation)
      cat <<EOF
Create a new participation using hugo

Usage:
  `readlink -f "$0"` newparticipation <participation_name> [<language>]

Arguments:
  participation_name        The name of the participation, use quotes if it has spaces
  language                  The language of the participation (optional, eg: en)
EOF
      ;;
    server)
      cat <<EOF
Runs hugo dev server [command] [flags]

Usage:
  `readlink -f "$0"` server [(dev)|prod]

Commands:
  dev                       Runs with environment development (default)
  prod                      Runs with environment production

Flags: hugo server flags
EOF
      ;;
    translations)
      cat <<EOF
Translation related commands

Usage:
  `readlink -f "$0"` translations command

Commands:
  showmissing               Shows missing content file translations
  showmissingterms          Shows missing terms in translation files
  createmissing             Creates the missing content file translations
EOF
      ;;
    deploy)
      cat <<EOF
Translation related commands

Usage:
  `readlink -f "$0"` deploy command

Commands:
  azure                     Deploys to Azure Static Web Apps
  github                    Deploys to Github Pages
EOF
      ;;
    fontawesome)
      cat <<EOF
Creates the fontawesome JavaScript file from usages

Usage:
  `readlink -f "$0"` fontawesome [command]

Commands:
  view                     Prints generated file in the editor
  generate                 Default. Generates the file into $PWD/assets/js/fontawesome.generated.mjs
EOF
      ;;
    *)
      cat <<EOF
Runs Hugo commands

Usage:
  `readlink -f "$0"` command [flags] [command args]

Commands:
  build                     Builds the site
  check                     Checks all files for linting and spelling errors
  complete                  Generates bash completion script
  deploy                    Deploy commands
  fontawesome               Creates the fontawesome JavaScript file from usages
  makebundle                Create a bundle from a page
  newpost                   Create a new post
  newparticipation          Create a new participation
  server                    Runs Hugo dev server
  translations              Translation related commands
Flags:
      --verbose             Show verbose output
  -h, --help                help
EOF
      ;;
  esac
  if [ $# -eq 1 ]; then exit $1; fi
  exit 0
}

function die() {
  echo "$1" >&2
  exit 1
}

function build() {
  if [ -d public ]; then
    rm -rf public
  fi
  hugo build --environment production "$@"
  ./critical.mjs
  pagefind --site public
  exit 0
}

function check() {
  if [[ $# -eq 0 ]]; then
    SUBCOMMAND=run
  else
    if [[ "$1" != -* ]]; then
      SUBCOMMAND="$1"
      shift
    fi
  fi
  source $GET_GLOBAL_ARGS
  case "$SUBCOMMAND" in
    run)
      set +e
      echo "Running markdownlint..."
      npm run markdownlint
      echo "Running eslint..."
      npm run eslint -- --max-warnings=0
      echo "Running prettier..."
      npm run prettier -- --check .
      echo "Running stylelint..."
      npm run cspell .
      set -e
      ;;
    fix)
      echo "Fixing with markdownlint..."
      npm run markdownlint -- --fix
      echo "Fixing with eslint..."
      npm run eslint -- --fix
      echo "Fixing with prettier..."
      npm run prettier -- --write .
      local spelling_errors
      spelling_errors="$(npm run cspell -- lint --words-only --quiet . | sort | uniq)"
      if [ -n "$spelling_errors" ]; then
        echo "Cspell can't fix errors, please fix them manually. See bellow a list of spelling errors that you can add to your dictionary files if needed."
        echo "$spelling_errors"
      fi
      ;;
    *)
      help 1
      ;;
  esac
  exit 0
}

function makebundle() {
  if [ $# -eq 0 ]; then
    help 1
  fi
  local basename="$1"
  local content="blog/$basename.md"
  local file="content/$content"
  if ! [ -f "$file" ]; then
    echo "File $file does not exist."
    exit 1
  fi
  local new_dir="content/blog/$basename"
  if [ -d "$new_dir" ]; then
    echo "Directory $new_dir already exists."
    \ls -lah "$new_dir"
    exit 1
  else
    mkdir -p "$new_dir/images"
  fi
  local new_file_name="$new_dir/index.md"
  if git ls-files --error-unmatch $file --quiet &> /dev/null; then
    git mv $file $new_file_name
  else
    mv $file $new_file_name
  fi
  exit 0
}

function newpost() {
  if [ $# -eq 0 ]; then
    help 1
  fi
  newcontent "$1" blog
}

function newparticipation() {
  # $1 = basename
  # $2 = language (optional - en, do not use pt or pt-BR)
  if [ $# -eq 0 ]; then
    help 1
  fi
  if [ -v 2 ]; then
    newcontent "$1" participations "$2"
  else
    newcontent "$1" participations
  fi
}

function newcontent() {
  # $1 = basename
  # $2 = archetype / folder (blog, participations)
  # $3 = language (optional)
  if [ $# -lt 2 ]; then
    help 1
  fi
  local language=""
  if [ -v 3 ]; then
    language=".$3"
  fi
  local basename="$1"
  local content="$2/$basename$language.md"
  local file="content/$content"
  local slugified_basename="$(npm run --silent slugify "$1")"
  local slugified_content="$2/$slugified_basename$language.md"
  local slugified_file="content/$slugified_content"
  if [ -f "$file" ]; then
    echo "File $file already exists."
    \ls -lah "$file"
    exit 1
  fi
  if [ -f "$slugified_file" ]; then
    echo "File $slugified_file already exists."
    \ls -lah "$slugified_file"
    exit 1
  fi
  local created_message
  created_message=$(hugo new content "$content")
  echo "$created_message"
  local file_created
  file_created=$(echo "$created_message" | grep -oP --color=never '(?<=Content ").*(?=".*)')
  mv "$file_created" "$slugified_file"
  code "$slugified_file"
  exit 0
}

function server() {
  if [[ $# -eq 0 ]]; then
    SUBCOMMAND=dev
  else
    if [[ "$1" == -* ]]; then
      SUBCOMMAND=dev
    else
      SUBCOMMAND="$1"
      shift
    fi
  fi
  source $GET_GLOBAL_ARGS
  case "$SUBCOMMAND" in
    dev|development)
      hugo server --buildDrafts  --printPathWarnings  --renderToMemory --baseURL http://local.giggio.net/ "$@"
      ;;
    prod|production)
      hugo server --buildDrafts  --printPathWarnings  --renderToMemory --baseURL http://local.giggio.net/ --gc --environment production --disableLiveReload --disableFastRender "$@"
      ;;
    *)
      help 1
      ;;
  esac
  exit 0
}

function translations() {
  if [[ $# -eq 0 ]]; then help 1; fi
  SUBCOMMAND="$1"
  shift
  source "$GET_GLOBAL_ARGS"
  function showmissing() {
    find content -name "*.md" -not -name '*.en.md' -not -path 'content/participations/*' \
      | grep -v -F -f <(find content -name "*.en.md" | sed 's/.en.md$/.md/') || true
    exit 0
  }
  function createmissing() {
    showmissing | xargs -d $'\n' sh -c 'for arg do cp --verbose "$(dirname $arg)/$(basename $arg)" "${arg%.md}.en.md"; done' _
    exit 0
  }
  function showmissingterms() {
    delta <(yq -r '([paths|(map(".\(.)")|join(""))]|unique).[]' i18n/pt-BR.yaml ) \
      <(yq -r '([paths|(map(".\(.)")|join(""))]|unique).[]' i18n/en.yaml) || true
    exit 0
  }
  case "$SUBCOMMAND" in
    showmissing)
      showmissing "$@"
      ;;
    createmissing)
      createmissing "$@"
      ;;
    showmissingterms)
      showmissingterms "$@"
      ;;
    *)
      ;;
  esac
  help 1
}

function deploy() {
  if [[ $# -eq 0 ]]; then help 1; fi
  SUBCOMMAND="$1"
  shift
  source "$GET_GLOBAL_ARGS"
  function azure() {
    swa deploy --env production
    exit 0
  }
  function github() {
    echo "Not possible, you need to use Github actions."
    exit 0
  }
  case "$SUBCOMMAND" in
    azure)
      azure "$@"
      ;;
    github)
      github "$@"
      ;;
    *)
      ;;
  esac
  help 1
}

function fontawesome() {
  if [[ $# -eq 0 ]]; then
    SUBCOMMAND=generate
  else
    if [[ "$1" == -* ]]; then
      SUBCOMMAND=generate
    else
      SUBCOMMAND="$1"
      shift
    fi
  fi
  source $GET_GLOBAL_ARGS
  function generate_output() {
    if ! [ -f hugo_stats.json ]; then
      >&2 echo "File hugo_stats.json not found, running hugo build first."
      HUGO_BUILD_BUILDSTATS_ENABLE=true hugo build --environment development
    fi
    if ! [ -d node_modules ]; then
      >&2 echo "Node modules not found, running npm ci first."
      npm ci
    fi
    local searched_files
    searched_files=$(jq -r '.htmlElements.classes[]' hugo_stats.json | grep -E 'fa-' | grep -E --invert-match 'fa-brands|fa-solid' | sort | uniq | sed 's/-\([a-z]\)/\U\1/g' | awk '{ print $0".js" }')
    local all_files=''
    declare -A extra_classes
    # space separated values, but we only have one, at the moment:
    extra_classes['@fortawesome/free-solid-svg-icons']='faShareFromSquare'
    extra_classes['@fortawesome/free-brands-svg-icons']=''
    echo "import { dom, library } from '@fortawesome/fontawesome-svg-core';"
    for package in @fortawesome/free-brands-svg-icons @fortawesome/free-solid-svg-icons; do
      local package_dir="node_modules/$package"
      if ! [ -d "$package_dir" ]; then
        >&2 echo "Directory $package_dir not found. Was the package uninstalled?"
        return 1
      fi
      local existing_files
      existing_files=$(find $package_dir -maxdepth 1 -name 'fa*.js' -exec basename {} \; | sort | uniq)
      local found_files
      found_files=$(comm -12 <(echo "$searched_files" | sort) <(echo "$existing_files") | sed 's/\.js/,/' | sort)
      all_files+=$'\n'"$found_files"
      echo "import {"
      echo "$found_files" | sed 's/^/  /'
      if ! [ -z "${extra_classes[$package]}" ]; then
        echo "${extra_classes[$package]}" | sed 's/ /\,\n/' | sed 's/^/  /'
      fi
      echo "} from "'"'$package'"'";"
    done
    all_files=$(echo "$all_files" | sed 1d)
    echo 'library.add('
    echo "$all_files" | sed 's/^/  /'
    for elem in "${!extra_classes[@]}"; do
      if ! [ -z "${extra_classes[${elem}]}" ]; then
        echo "${extra_classes[${elem}]}" | sed 's/ /\,\n/' | sed 's/^/  /'
      fi
    done
    echo ');'
    all_files=$(echo "$all_files" | sed 's/,/.js/')
    local files_not_found
    files_not_found=$(comm -23 <(echo "$searched_files" | sort) <(echo "$all_files" | sort))
    echo "export { dom, library };"
    if [ -n "$files_not_found" ]; then
      >&2 echo "Files not found:"
      >&2 echo "$files_not_found"
      return 1
    fi
  }
  case "$SUBCOMMAND" in
    view)
      generate_output
      exit $?
      ;;
    generate)
      local output_file
      output_file="$PWD/assets/js/fontawesome.generated.mjs"
      if ! [ -f "$output_file" ]; then
        >&2 echo "File $output_file not found, you are probably in the wrong directory. Please run this script from the root of the repository."
        exit 1
      fi
      generate_output 1> "$output_file"
      exit $?
      ;;
    *)
      SUBCOMMAND=''
      help 1
      ;;
  esac
}

function complete() {
  cat <<'EOF'
#/usr/bin/env bash

_forward_to_hugo() {
  local -
  set -o pipefail
  local command_completion_function
  if ! command_completion_function="$(complete -p hugo 2>/dev/null | sed 's/.*-F \([^ ]*\) .*/\1/')"; then
    _completion_loader hugo
    command_completion_function="$(complete -p hugo 2>/dev/null|sed 's/.*-F \([^ ]*\) .*/\1/')"
  fi
  if [ -v command_completion_function ]; then
    COMP_LINE="hugo server ${COMP_WORDS[@]:COMP_CWORD}"
    COMP_WORDS=("hugo" "server" ${COMP_WORDS[@]:COMP_CWORD} )
    COMP_CWORD=2
    $command_completion_function
  fi
}
_hugo_local_completions() {
  # echo len "${#COMP_WORDS[0]}"
  # echo 0 "${COMP_WORDS[0]}"
  # echo 1 "${COMP_WORDS[1]}"
  # echo 2 "${COMP_WORDS[2]}"
  # echo 3 "${COMP_WORDS[3]}"
  # echo 0 $0
  # echo 1 $1
  # echo 2 $2
  # echo 3 $3
  # echo 4 $4
  # echo COMP_CWORD $COMP_CWORD
  # echo COMP_LINE $COMP_LINE
  local common_options="-h --help --verbose"
  case "${#COMP_WORDS[@]}" in
    2)
      COMPREPLY=($(compgen -W "build check fontawesome makebundle newpost newparticipation server translations deploy complete $common_options" -- "${COMP_WORDS[1]}"))
      ;;
    3)
      case "${COMP_WORDS[1]}" in
        check)
          COMPREPLY=($(compgen -W "run fix $common_options" -- "${COMP_WORDS[2]}"))
          ;;
        makebundle)
          COMPREPLY=($(compgen -W "$(find content/blog -maxdepth 1 -name '*.md' -not -name '_index*.md' -exec basename -s .md -- {} +) $common_options" -- "${COMP_WORDS[2]}"))
          ;;
        translations)
          COMPREPLY=($(compgen -W "showmissing createmissing showmissingterms $common_options" -- "${COMP_WORDS[2]}"))
          ;;
        deploy)
          COMPREPLY=($(compgen -W "azure github $common_options" -- "${COMP_WORDS[2]}"))
          ;;
        server)
          # forward to hugo server completions:
          local local_options
          local_options=($(compgen -W "dev prod $common_options" -- "${COMP_WORDS[2]}"))
          _forward_to_hugo
          COMPREPLY+=( "${local_options[@]}" )
          ;;
        fontawesome)
          COMPREPLY=($(compgen -W "view generate $common_options" -- "${COMP_WORDS[2]}"))
          ;;
        build|newpost|newparticipation|complete)
          COMPREPLY=($(compgen -W "$common_options" -- "${COMP_WORDS[2]}"))
          ;;
        *)
          return
          ;;
      esac
      ;;
    4)
      case "${COMP_WORDS[1]}" in
        translations|deploy|check)
          if [[ "${COMP_WORDS[2]}" != -* ]]; then
            COMPREPLY=($(compgen -W "$common_options" -- "${COMP_WORDS[3]}"))
          fi
          ;;
        server)
          _forward_to_hugo
          ;;
      esac
      ;;
    *)
      return
      ;;
  esac
}

complete -F _hugo_local_completions ./h
complete -F _hugo_local_completions h
EOF
  exit 0
}

function get_global_args() {
  SHOW_HELP=false
  VERBOSE=false
  while [[ $# -gt 0 ]]; do
    case "$1" in
      --help|-h)
      SHOW_HELP=true
      shift
      ;;
      --verbose)
      VERBOSE=true
      shift
      ;;
      *)
      break
      ;;
    esac
  done
  if $SHOW_HELP; then help; fi
}

function main() {
  if [ "$EUID" == "0" ]; then
    die "Please do not run this script as root"
  fi

  GET_GLOBAL_ARGS=`mktemp`
  declare -f get_global_args | tail -n +3 | head -n -1 > $GET_GLOBAL_ARGS

  local all_args
  all_args=$*
  COMMAND=""
  SUBCOMMAND=""
  if [[ $# -eq 0 ]]; then help; fi
  COMMAND="$1"
  shift

  source $GET_GLOBAL_ARGS

  if $VERBOSE; then
    echo "Running `basename "$0"` $all_args"
  fi

  case "$COMMAND" in
    complete)
      complete "$@"
      ;;
    build)
      build "$@"
      ;;
    check)
      check "$@"
      ;;
    makebundle)
      makebundle "$@"
      ;;
    newpost)
      newpost "$@"
      ;;
    newparticipation)
      newparticipation "$@"
      ;;
    server)
      server "$@"
      ;;
    translations)
      translations "$@"
      ;;
    deploy)
      deploy "$@"
      ;;
    fontawesome)
      fontawesome "$@"
      ;;
    *)
      ;;
  esac

  help
}

main "$@"
